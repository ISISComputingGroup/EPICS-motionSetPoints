record(stringin, "$(P)POSN:SP:RBV")
{
	field(DESC, "Current target")
	field(DTYP,"asynOctetRead")
	field(INP,"@asyn($(LOOKUP),0)POSNSPRBV")
	field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(stringout, "$(P)POSN:SP")
{
	field(DESC, "Set target")
	field(DTYP,"asynOctetWrite")
	field(FLNK, "$(P)INT:POSN:SP")
	field(OUT,"@asyn($(LOOKUP),0)POSNSP")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(longin, "$(P)IPOSN:SP:RBV")
{
	field(DESC, "Current target index")
	field(DTYP,"asynInt32")
	field(INP,"@asyn($(LOOKUP),0)IPOSNSPRBV")
	field(EGU, "")
	field(SCAN, "I/O Intr")
}

record(longout, "$(P)IPOSN:SP")
{
	field(DESC, "Set target by index")
	field(DTYP,"asynInt32")
	field(FLNK, "$(P)INT:POSN:SP")
	field(OUT,"@asyn($(LOOKUP),0)IPOSNSP")
	field(EGU, "")
}

record(fanout, "$(P)INT:POSN:SP")
{
	field(DESC, "Propagate set")
	field(LNK1, "$(P)COORD0:NO_OFFSET")
	field(LNK2, "$(P)COORD1:NO_OFFSET")
}

record(stringin, "$(P)POSN_NO_ERR")
{
	field(DESC, "Current position with no error")
	field(SCAN, "1 second")
	field(DTYP,"asynOctetRead")
	field(INP,"@asyn($(LOOKUP),0)POSN")
    field(FLNK, "$(P)POSN_CALC")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(scalcout, "$(P)POSN_CALC")
{
	field(DESC, "Add alarm to current position")
	field(INAA, "$(P)POSN_NO_ERR")
	field(INPA, "$(P)FORWARD_ALARM MS")
	
    field(CALC, "AA")
    field(OUT, "$(P)POSN MS")
    field(FLNK, "$(P)POSN")
}

record(stringin, "$(P)POSN")
{
	field(DESC, "Current position")
	info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(stringin, "$(P)NPOSN")
{
	field(DESC, "Current nearest position")
	field(DTYP,"asynOctetRead")
	field(INP,"@asyn($(LOOKUP),0)NPOSN")
	field(SCAN, "I/O Intr")
	info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(longin, "$(P)IPOSN")
{
	field(DESC, "Current position index")
	field(DTYP,"asynInt32")
	field(INP,"@asyn($(LOOKUP),0)IPOSN")
	field(EGU, "")
	field(SCAN, "I/O Intr")
}

record(longin, "$(P)NIPOSN")
{
	field(DESC, "Current nearest position index")
	field(DTYP,"asynInt32")
	field(INP,"@asyn($(LOOKUP),0)NIPOSN")
	field(EGU, "")
	field(SCAN, "I/O Intr")
}

record(ao, "$(P)RESET")
{
	field(DESC, "Reread the lookup file")
	field(DTYP,"asynFloat64")
	field(FLNK, "$(P)INT:RESET")
	field(OUT,"@asyn($(LOOKUP),0)RESET")
	field(PINI,"YES")
}

record(fanout, "$(P)INT:RESET")
{
	field(DESC, "Propagate reset")
	field(LNK1, "$(P)_POSITIONS")
	field(LNK2, "$(P)INT:READ0")
}

record(ai, "$(P)NUMAXES")
{
	field(DESC, "Number of axes")
	field(DTYP,"asynFloat64")
    field(SCAN, "I/O Intr")
	field(EGU,"")
	field(PREC,"1")
	field(INP,"@asyn($(LOOKUP),0)NUMAXES")
}

record(longin, "$(P)POSN:NUM")
{
	field(DESC, "Number of positions")
	field(DTYP,"asynInt32")
    field(SCAN, "I/O Intr")
	field(INP,"@asyn($(LOOKUP),0)NUMPOS")
	field(EGU, "")
}

## how close we must be to a position to be considered at that position
## we also wait for motion to stop, so a large value here will just mean we
## are in positon once we have (1) stopped moving and the (2) the target position 
## is the closest match out of all available positions. See POSITIONED below
record(ao, "$(P)TOLERENCE")
{
    field(DESC, "Position tolerance")
	field(DTYP,"asynFloat64")
	field(VAL, "$(TOL=1e10)")
	field(OUT,"@asyn($(LOOKUP),0)TOL")
	field(EGU,"")
	field(PREC,"3")
	field(PINI, "YES")
	field(FLNK, "$(P)POSITIONED")
}

record(ai, "$(P)POSDIFF")
{
	field(DESC, "distance from current position")
	field(DTYP,"asynFloat64")
	field(INP,"@asyn($(LOOKUP),0)POSDIFF")
    field(SCAN, "I/O Intr")
	field(EGU,"")
	field(PREC,"3")
}

record(calc, "$(P)FORWARD_ALARM")
{
	field(DESC, "Forwards the alarm from axes")
	field(INPA, "$(P)COORD$(COORD0):MTR CP MS")
	field(INPB, "$(P)COORD$(COORD1=0):MTR CP MS")   
	field(INPC, "$(P)COORD$(COORD2=0):MTR CP MS")   
	field(INPD, "$(P)COORD$(COORD3=0):MTR CP MS")   
	field(INPE, "$(P)COORD$(COORD4=0):MTR CP MS")   
	field(INPF, "$(P)COORD$(COORD5=0):MTR CP MS")   
	field(INPG, "$(P)COORD$(COORD6=0):MTR CP MS")   
	field(INPH, "$(P)COORD$(COORD7=0):MTR CP MS")   
	field(INPI, "$(P)COORD$(COORD8=0):MTR CP MS")   
	field(INPJ, "$(P)COORD$(COORD9=0):MTR CP MS")  
	
}
record(calc, "$(P)STATIONARY")
{
    field(DESC, "Is sample in position")
	field(INPA, "$(P)STATIONARY$(COORD0)")
	field(INPB, "$(P)STATIONARY$(COORD1=0)")   
	field(INPC, "$(P)STATIONARY$(COORD2=0)")   
	field(INPD, "$(P)STATIONARY$(COORD3=0)")   
	field(INPE, "$(P)STATIONARY$(COORD4=0)")   
	field(INPF, "$(P)STATIONARY$(COORD5=0)")   
	field(INPG, "$(P)STATIONARY$(COORD6=0)")   
	field(INPH, "$(P)STATIONARY$(COORD7=0)")   
	field(INPI, "$(P)STATIONARY$(COORD8=0)")   
	field(INPJ, "$(P)STATIONARY$(COORD9=0)")   
	field(CALC, "(A&&B&&C&&D&&E&&F&&G&&H&&I&&J)")
	field(FLNK, "$(P)POSITIONED")
	field(EGU, "")
    info(INTEREST, "HIGH")
}

## when are we in position? When position names match and we have stopped moving
record(calc, "$(P)POSITIONED")
{
	field(INPA, "$(P)STATIONARY")
	field(INPB, "$(P)IPOSN:SP:RBV")
	field(INPC, "$(P)IPOSN")
	field(INPD, "$(P)FORWARD_ALARM MS")
	field(CALC, "(B==C)&&A")
}
# The DMOV for POSN is the same as POSITIONED
alias("$(P)POSITIONED", "$(P)POSN:DMOV")

# epics string is 40 characters, so NELM in char waveform _POSITIONS is 40 * NELM in POSITIONS
# need intermediate char waveform as ASYN does not do currently handle string waveforms

record(waveform,"$(P)POSITIONS") 
{
    field(DESC, "Available positions")
	field(FTVL,"STRING")
	field(NELM,"200")
}

record(waveform,"$(P)_POSITIONS") 
{
	field(DTYP,"asynOctetRead")
	field(FTVL,"CHAR")
	field(NELM,"8000")
	field(INP,"@asyn($(LOOKUP),0)POSITIONS")
	field(FLNK, "$(P)_WFCTOS")
}
alias("$(P)_POSITIONS", "$(P)POSITIONS_C")

record(aSub, "$(P)_WFCTOS")
{
  field(SNAM, "charToStringWaveform")
  field(INPA, "$(P)_POSITIONS")
  field(FTA, "CHAR")
  field(NOA, "8000")
  field(INPB, "$(P)_POSITIONS.NORD")
  field(FTB, "ULONG")
  field(NOB, "1")
  field(OUTA, "$(P)POSITIONS PP")
  field(FTVA, "STRING")
  field(NOVA, "200")
  field(FLNK, "$(P)_SPLITPOSNS")
} 

record(stringin, "$(P)WFSPLITSEP") 
{
  field(VAL, " ")
}

record(aSub, "$(P)_SPLITPOSNS")
{
  field(SNAM, "splitCharWaveform")
  field(INPA, "$(P)_POSITIONS")
  field(FTA, "CHAR")
  field(NOA, "8000")
  field(INPB, "$(P)_POSITIONS.NORD")
  field(FTB, "ULONG")
  field(FTC, "ULONG")
  field(INPC, "1")
  field(FTD, "STRING")
  field(INPD, "$(P)WFSPLITSEP")
  field(FTE, "ULONG")
  field(INPE, "40")
  field(FTVA, "STRING")
  field(FTVB, "STRING")
  field(FTVC, "STRING")
  field(FTVD, "STRING")
  field(FTVE, "STRING")
  field(FTVF, "STRING")
  field(FTVG, "STRING")
  field(FTVH, "STRING")
  field(FTVI, "STRING")
  field(FTVJ, "STRING")
  field(FTVK, "STRING")
  field(FTVL, "STRING")
  field(FTVM, "STRING")
  field(FTVN, "STRING")
  field(FTVO, "STRING")
  field(FTVP, "STRING")
  field(FTVQ, "STRING")
  field(FTVR, "STRING")
  field(FTVS, "STRING")
  field(FTVT, "STRING")
  field(FTVU, "ULONG")
}
