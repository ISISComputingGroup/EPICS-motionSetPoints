record(stringin, "$(P)COORD1:NAME")
{
	field(DESC, "Name of the first coord")
	field(VAL, "$(NAME1=$(TARGET_PV1=$(AXIS1=)))")
}

record(stringin, "$(P)COORD2:NAME")
{
	field(DESC, "Name of the first coord")
	field(VAL, "$(NAME2=$(TARGET_PV2=$(AXIS2=No Axis 2)))")
}

# colon in :MTR is needed because it is a dummy for $(P):MTR in alias
record(ai, "$(P):MTR")
{
	field(DESC, "Dummy record to help with mtr alias")
}

alias("$(TARGET_PV1=$(AXIS1):MTR)","$(P)COORD1:MTR")
alias("$(TARGET_PV2=$(AXIS2=$(P)):MTR)","$(P)COORD2:MTR")

record(ai, "$(P)COORD1:IN_POSITION") {
    field(INP, "$(TARGET_PV1=$(AXIS1)):DIFF_WITHIN_TOL CP MS")
}

record(ai, "$(P)COORD2:IN_POSITION") {
    field(INP, "$(TARGET_PV2=$(AXIS2)):DIFF_WITHIN_TOL CP MS")
}

record(stringin, "$(P)POSN:SP:RBV")
{
	field(DESC, "Current target")
	field(DTYP,"asynOctetRead")
	field(INP,"@asyn($(LOOKUP),0,0)POSNSPRBV")
	field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(stringout, "$(P)POSN:SP")
{
	field(DESC, "Set target")
	field(DTYP,"asynOctetWrite")
	field(FLNK, "$(P)INT:POSN:SP")
	field(OUT,"@asyn($(LOOKUP),0,0)POSNSP")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    field(UDFS, "NO_ALARM")
}

record(longin, "$(P)IPOSN:SP:RBV")
{
	field(DESC, "Current target index")
	field(DTYP,"asynInt32")
	field(INP,"@asyn($(LOOKUP),0,0)IPOSNSPRBV")
	field(EGU, "")
	field(SCAN, "I/O Intr")
}

record(longout, "$(P)IPOSN:SP")
{
	field(DESC, "Set target by index")
	field(DTYP,"asynInt32")
	field(FLNK, "$(P)INT:POSN:SP")
	field(OUT,"@asyn($(LOOKUP),0,0)IPOSNSP")
	field(EGU, "")
}

record(fanout, "$(P)INT:POSN:SP")
{
	field(DESC, "Propagate set")
	field(LNK1, "$(P)COORD1:NO_OFFSET")
	field(LNK2, "$(P)COORD2:NO_OFFSET")
}

record(stringin, "$(P)POSN_NO_ERR")
{
	field(DESC, "Current position with no error")
	field(SCAN, "1 second")
	field(DTYP,"asynOctetRead")
	field(INP,"@asyn($(LOOKUP),0,0)POSN")
    field(FLNK, "$(P)POSN_CALC")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(scalcout, "$(P)POSN_CALC")
{
	field(DESC, "Add alarm to current position")
	field(INAA, "$(P)POSN_NO_ERR")
	field(INPA, "$(TARGET_RBV1=$(AXIS1)) MS")
	field(INPB, "$(TARGET_RBV2=$(TARGET_RBV1=$(AXIS2=$(AXIS1)))) MS")

    field(CALC, "AA")
    field(OUT, "$(P)POSN MS")
    field(FLNK, "$(P)POSN")
}

record(stringin, "$(P)POSN")
{
	field(DESC, "Current position")
	info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(stringin, "$(P)NPOSN")
{
	field(DESC, "Current nearest position")
	field(DTYP,"asynOctetRead")
	field(INP,"@asyn($(LOOKUP),0,0)NPOSN")
	field(SCAN, "I/O Intr")
	info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(longin, "$(P)IPOSN")
{
	field(DESC, "Current position index")
	field(DTYP,"asynInt32")
	field(INP,"@asyn($(LOOKUP),0,0)IPOSN")
	field(EGU, "")
	field(SCAN, "I/O Intr")
}

record(longin, "$(P)NIPOSN")
{
	field(DESC, "Current nearest position index")
	field(DTYP,"asynInt32")
	field(INP,"@asyn($(LOOKUP),0,0)NIPOSN")
	field(EGU, "")
	field(SCAN, "I/O Intr")
}

record(ai, "$(P)STATIONARY")
{
    field(DESC, "Is sample in position")
	field(SCAN, "1 second")
	field(INP, "$(TARGET_DONE=$(AXIS1):DMOV)")
	field(FLNK, "$(P)POSITIONED")
	field(EGU, "")
    info(INTEREST, "HIGH")
}

# colon in :DMOV is needed because it is a dummy for $(P):DMOV in alias
record(ai, "$(P):DMOV")
{
    field(DESC, "Dummy record for when there is no axis 2")
    field(VAL, 0)
    field(PINI, "YES")
}

record(ai, "$(P)STATIONARY2")
{
    field(DESC, "Is sample in position")
	field(SCAN, "1 second")
	field(INP, "$(TARGET_DONE2=$(AXIS2=$(P)):DMOV)")
	field(FLNK, "$(P)POSITIONED")
	field(EGU, "")
    info(INTEREST, "HIGH")
}

record(ai, "$(P)COORD1:NO_OFFSET")
{
	field(DESC, "Target position 1 no offset")
	field(DTYP,"asynFloat64")
    field(FLNK, "$(P)COORD1")
	field(EGU,"mm")
	field(PREC,"1")
	field(VAL,"0")
	field(INP,"@asyn($(LOOKUP),0,0)COORD1RBV")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(ai, "$(P)COORD1:OFFSET")
{
    field(DESC, "Offset for coord 1")
    field(FLNK, "$(P)COORD1")
  	field(EGU,"mm")
	field(PREC,"1")
	field(VAL,"0")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    info(autosaveFields, "VAL")
}

alias("$(P)COORD1:OFFSET", "$(P)COORD1:OFFSET:SP")

record(calc, "$(P)COORD1")
{
    field(DESC, "Position 1 with offset")
    field(INPA, "$(P)COORD1:NO_OFFSET MS")
    field(INPB, "$(P)COORD1:OFFSET")
    field(CALC, "A+B")
    field(FLNK, "$(P)INT:WRITE1")
  	field(EGU,"mm")
	field(PREC,"1")
	field(VAL,"0")
    field(ASG, "READONLY")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}


record(dfanout, "$(P)INT:WRITE1")
{
	field(DESC, "Pushes COORD1 to motor")
	field(DOL, "$(P)COORD1")
	field(OMSL, "closed_loop")
	field(OUTA, "$(TARGET_PV1=$(AXIS1):SP)")
	field(SELM, "Mask")
	field(SELN, "1")
	field(FLNK, "$(TARGET_PV1=$(AXIS1):SP)")
}

record(ao, "$(P)COORD1:RBV")
{
	field(DESC, "Current motor1 position")
	field(FLNK, "$(P)COORD1:RBV:OFFSET")
	field(EGU,"mm")
	field(PREC,"1")
	field(OUT,"$(P)COORD1:RBV:OFFSET.A")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(calcout, "$(P)COORD1:RBV:OFFSET")
{
    field(DESC, "Motor1 position with offset")
	field(FLNK, "$(P)COORD1:LOOKUP:SET:RBV")
	field(EGU, "mm")
	field(PREC,"1")
    # A is set by COORD1:RBV
    field(INPA, "0") 
    field(INPB, "$(P)COORD1:OFFSET")
    field(CALC, "A-B")
	field(OUT,"$(P)COORD1:LOOKUP:SET:RBV")
}

record(ao, "$(P)COORD1:LOOKUP:SET:RBV")
{
	field(DESC, "Send motor1 position to lookup")
	field(DTYP,"asynFloat64")
	field(FLNK, "$(P)POSN_NO_ERR")
	field(EGU,"mm")
	field(PREC,"1")
	field(OUT,"@asyn($(LOOKUP),0,0)COORD1")
}

record(dfanout, "$(P)INT:READ1")
{
	field(DESC, "Updates COORD1:RBV")
	field(SCAN, "1 second")
	field(DOL, "$(TARGET_RBV1=$(AXIS1)) MS")
	field(OMSL, "closed_loop")
	field(OUTA, "$(P)COORD1:RBV MS")
	field(SELM, "Mask")
	field(SELN, "1")
	field(FLNK, "$(P)COORD1:RBV")
}

record(ai, "$(P)COORD2:OFFSET")
{
    field(DESC, "Offset for coord 2")
    field(VAL, "0")    
    field(FLNK, "$(P)COORD2")
  	field(EGU,"mm")
	field(PREC,"1")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    info(autosaveFields, "VAL")
}
alias("$(P)COORD2:OFFSET", "$(P)COORD2:OFFSET:SP")

record(ai, "$(P)COORD2:NO_OFFSET")
{
	field(DESC, "Target position 2 no offset")
	field(DTYP,"asynFloat64")
	field(FLNK, "$(P)COORD2")
	field(EGU,"mm")
	field(PREC,"1")
	field(VAL,"0")
	field(INP,"@asyn($(LOOKUP),0,0)COORD2RBV")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(calc, "$(P)COORD2")
{
	field(DESC, "Target position 2 with offset")
    field(INPA, "$(P)COORD2:NO_OFFSET MS")
    field(INPB, "$(P)COORD2:OFFSET")
    field(CALC, "A+B")
    field(FLNK, "$(P)INT:WRITE2")
  	field(EGU,"mm")
	field(PREC,"1")
	field(VAL,"0")
    field(ASG, "READONLY")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

# colon in :SP is needed because it is a dummy for $(P):SP in alias
record(ai, "$(P):SP")
{
    field(DESC, "Dummy record for when there is no axis 2")
    field(VAL, 0)
    field(PINI, "YES")
}

record(dfanout, "$(P)INT:WRITE2")
{
	field(DESC, "Pushes COORD2 to motor")
	field(DOL, "$(P)COORD2")
	field(OMSL, "closed_loop")
	field(OUTA, "$(TARGET_PV2=$(AXIS2=$(P)):SP)")
	field(SELM, "Mask")
	field(SELN, "1")
	field(FLNK, "$(TARGET_PV2=$(AXIS2=$(P)):SP)")
}

record(ao, "$(P)COORD2:RBV")
{
	field(DESC, "Current motor2 position")
	field(FLNK, "$(P)COORD2:RBV:OFFSET")
	field(EGU,"mm")
	field(PREC,"1")
	field(OUT,"$(P)COORD2:RBV:OFFSET.A")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(calcout, "$(P)COORD2:RBV:OFFSET")
{
    field(DESC, "Motor2 position with offset")
	field(FLNK, "$(P)COORD2:LOOKUP:SET:RBV")
	field(EGU, "mm")
	field(PREC,"1")
    # A is set by COORD2:RBV
    field(INPA, "0") 
    field(INPB, "$(P)COORD2:OFFSET")
    field(CALC, "A-B")
	field(OUT,"$(P)COORD2:LOOKUP:SET:RBV")
}

record(ao, "$(P)COORD2:LOOKUP:SET:RBV")
{
	field(DESC, "Send motor2 position to lookup")
	field(DTYP,"asynFloat64")
	field(FLNK, "$(P)POSN_NO_ERR")
	field(EGU,"mm")
	field(PREC,"1")
	field(OUT,"@asyn($(LOOKUP),0,0)COORD2")
}


record(dfanout, "$(P)INT:READ2")
{
	field(DESC, "Updates COORD2:RBV")
	field(SCAN, "1 second")
	field(DOL, "$(TARGET_RBV2=$(AXIS2=)) MS")
	field(OMSL, "closed_loop")
	field(OUTA, "$(P)COORD2:RBV MS")
	field(SELM, "Mask")
	field(SELN, "1")
	field(FLNK, "$(P)COORD2:RBV")
}

record(ao, "$(P)RESET")
{
	field(DESC, "Reread the lookup file")
	field(DTYP,"asynFloat64")
	field(FLNK, "$(P)INT:RESET")
	field(OUT,"@asyn($(LOOKUP),0,0)RESET")
	field(PINI,"YES")
}

record(fanout, "$(P)INT:RESET")
{
	field(DESC, "Propagate reset")
	field(LNK1, "$(P)_POSITIONS")
	field(LNK2, "$(P)INT:READ1")
}

record(ai, "$(P)NUMAXES")
{
	field(DESC, "Number of axes")
	field(DTYP,"asynFloat64")
    field(SCAN, "I/O Intr")
	field(EGU,"")
	field(PREC,"1")
	field(INP,"@asyn($(LOOKUP),0,0)NUMAXES")
}

record(longin, "$(P)POSN:NUM")
{
	field(DESC, "Number of positions")
	field(DTYP,"asynInt32")
    field(SCAN, "I/O Intr")
	field(INP,"@asyn($(LOOKUP),0,0)NUMPOS")
	field(EGU, "")
}

## how close we must be to a position to be considered at that position
## we also wait for motion to stop, so a large value here will just mean we
## are in positon once we have (1) stopped moving and the (2) the target position 
## is the closest match out of all available positions. See POSITIONED below
record(ao, "$(P)TOLERENCE")
{
    field(DESC, "Position tolerance")
	field(DTYP,"asynFloat64")
	field(VAL, "$(TOL=1e10)")
	field(OUT,"@asyn($(LOOKUP),0,0)TOL")
	field(EGU,"")
	field(PREC,"3")
	field(PINI, "YES")
	field(FLNK, "$(P)POSITIONED")
}

record(ai, "$(P)POSDIFF")
{
	field(DESC, "distance from current position")
	field(DTYP,"asynFloat64")
	field(INP,"@asyn($(LOOKUP),0,0)POSDIFF")
    field(SCAN, "I/O Intr")
	field(EGU,"")
	field(PREC,"3")
}

## when are we in position? When position names match and we have stopped moving
record(calc, "$(P)POSITIONED")
{
	field(INPA, "$(TARGET_DONE=$(AXIS1):DMOV) MS")
    field(INPB, "$(TARGET_DONE2=$(TARGET_DONE=$(AXIS2=$(AXIS1)):DMOV)) MS")   
    field(INPC, "$(P)NUMAXES")
	field(INPD, "$(P)IPOSN:SP:RBV")
	field(INPE, "$(P)IPOSN")
	field(CALC, "(D==E)&&(C==1?A:A&&B)")
}
# The DMOV for POSN is the same as POSITIONED
alias("$(P)POSITIONED", "$(P)POSN:DMOV")

# epics string is 40 characters, so NELM in char waveform _POSITIONS is 40 * NELM in POSITIONS
# need intermediate char waveform as ASYN does not do currently handle string waveforms

record(waveform,"$(P)POSITIONS") 
{
    field(DESC, "Available positions")
	field(FTVL,"STRING")
	field(NELM,"200")
}

record(waveform,"$(P)_POSITIONS") 
{
	field(DTYP,"asynOctetRead")
	field(FTVL,"CHAR")
	field(NELM,"8000")
	field(INP,"@asyn($(LOOKUP),0,0)POSITIONS")
	field(FLNK, "$(P)_WFCTOS")
}
alias("$(P)_POSITIONS", "$(P)POSITIONS_C")

record(aSub, "$(P)_WFCTOS")
{
  field(SNAM, "charToStringWaveform")
  field(INPA, "$(P)_POSITIONS")
  field(FTA, "CHAR")
  field(NOA, "8000")
  field(INPB, "$(P)_POSITIONS.NORD")
  field(FTB, "ULONG")
  field(NOB, "1")
  field(OUTA, "$(P)POSITIONS PP")
  field(FTVA, "STRING")
  field(NOVA, "200")
  field(FLNK, "$(P)_SPLITPOSNS")
} 

record(stringin, "$(P)WFSPLITSEP") 
{
  field(VAL, " ")
}

record(aSub, "$(P)_SPLITPOSNS")
{
  field(SNAM, "splitCharWaveform")
  field(INPA, "$(P)_POSITIONS")
  field(FTA, "CHAR")
  field(NOA, "8000")
  field(INPB, "$(P)_POSITIONS.NORD")
  field(FTB, "ULONG")
  field(FTC, "ULONG")
  field(INPC, "1")
  field(FTD, "STRING")
  field(INPD, "$(P)WFSPLITSEP")
  field(FTE, "ULONG")
  field(INPE, "40")
  field(FTVA, "STRING")
  field(FTVB, "STRING")
  field(FTVC, "STRING")
  field(FTVD, "STRING")
  field(FTVE, "STRING")
  field(FTVF, "STRING")
  field(FTVG, "STRING")
  field(FTVH, "STRING")
  field(FTVI, "STRING")
  field(FTVJ, "STRING")
  field(FTVK, "STRING")
  field(FTVL, "STRING")
  field(FTVM, "STRING")
  field(FTVN, "STRING")
  field(FTVO, "STRING")
  field(FTVP, "STRING")
  field(FTVQ, "STRING")
  field(FTVR, "STRING")
  field(FTVS, "STRING")
  field(FTVT, "STRING")
  field(FTVU, "ULONG")
}
